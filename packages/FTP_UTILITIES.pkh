CREATE OR REPLACE PACKAGE ftp_utilities
IS
/* THESE HAVE BEEN SETUP TO BE UTILIZED AS DIRECT CALLS VIA ORACLE APPLICATIONS */
/* THEY RETURN FAILURE CODES APPROPRIATLY FOR USAGE IN REQUEST SETS AND PAGING ROUTINES */

   /* USE THIS PROCEDURE TO VERIFY THAT A SERVER AND PATH IS AVAILABLE */
   PROCEDURE verify_server (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_mainframe_connection     IN       VARCHAR2 DEFAULT 'F' );

/* USE THIS PROCEDURE TO COLLECT A REMOTE FILE TO THE DATABASE SERVER */
/* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
/* BINARY SUPPORTED */
   PROCEDURE get_remote_file (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_localpath                IN       VARCHAR2
,     p_filename                 IN       VARCHAR2
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_filetype                 IN       VARCHAR2 DEFAULT 'ASCII'
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F'
,     p_mainframe_command        IN       VARCHAR2 DEFAULT NULL);

/* USE THIS PROCEDURE TO TRANSFER A LOCAL FILE TO A REMOTE SERVER LOCATION */
/* BINARY SUPPORTED */

/* IF BINARY, THEN LOCAL DIRECTORY MUST BE DEFINED AS DATABASE DIRECTORY */
/* CONTACT DBA's TO VERIFY *?

/* HINT : IT MIGHT BE A GOOD IDEA TO SETUP ALL XFER INTERFACE DIRECTORIES */

   PROCEDURE put_remote_file (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_localpath                IN       VARCHAR2
,     p_filename                 IN       VARCHAR2
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_filetype                 IN       VARCHAR2 DEFAULT 'ASCII'
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F'
,     p_mainframe_command        IN       VARCHAR2 DEFAULT NULL );

/* USE THIS PROCEDURE TO REMOVE A FILE FROM A REMOTE SERVER LOCATION */
   PROCEDURE remove_remote_file (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_filename                 IN       VARCHAR2
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F');

/* USE THIS PROCEDURE TO RENAME A FILE ON A REMOTE SERVER LOCATION */
   PROCEDURE rename_remote_file (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_filename                 IN       VARCHAR2
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F' );

/* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
/* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
/* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
--
-- Only return filenames
--
   PROCEDURE get_remote_dir_short (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_localpath                IN       VARCHAR2
,     p_filename_filter          IN       VARCHAR2 DEFAULT NULL
,     p_dir_filename             IN       VARCHAR2 DEFAULT 'remotedir_list.txt'
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F' );

/* USE THIS PROCEDURE TO COLLECT A DIRECTORY LISTING */
/* OF REMOTE SERVER TO A FILE ON THE LOCAL DATABASE SERVER */
/* LOCAL DIRECTORY MUST BE WRITABLE BY UTL_FILE ROUTINES */
--
-- Returns full detail (timestamps,permissions, filenames, filesizes,etc)
--

   PROCEDURE get_remote_dir_long (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER
,     p_hostname                 IN       VARCHAR2
,     p_localpath                IN       VARCHAR2
,     p_filename_filter          IN       VARCHAR2 DEFAULT NULL
,     p_dir_filename             IN       VARCHAR2 DEFAULT 'remotedir_list.txt'
,     p_remotepath               IN       VARCHAR2
,     p_username                 IN       VARCHAR2
,     p_password                 IN       VARCHAR2
,     p_mainframe                IN       VARCHAR2 DEFAULT 'F');


/* Use this routine to return a failure code if not in production */
/* This would be used as a first stage in a request set to ensure */
/* a request set that includes the above FTP routines, that it    */
/* it would not fire off if executed in a test instance.          */
/*                                                                */
/* It would require someone to skip the first step to make it the */
/* request set run. However, in that event, they need to change   */
/* the necessary parameters to control the correct user/password  */
/* and server/path information                                    */
/*       										*/
/* We have a custom package and table that we use to identify     */
/* Production/QA/Test Instances. This data is used by shell       */
/* scripts, PLSQL, etc. to alter behavior with respect to the     */
/* Oracle environment. It ensures that we do not launch processes */
/* in non-production environments, or if we wish them to launch   */
/* how they launch (email addresses used, ftp servers used etc.)  */
/* can be controlled. You could easily build something similar    */
/*
   PROCEDURE is_not_prod (
      errbuf                     OUT      VARCHAR2
,     retcode                    OUT      NUMBER );

*/

   p_conn                        utl_tcp.connection;
   v_parm_value                  VARCHAR2 ( 4000 );
   lvbusgroupid                  NUMBER;
   lbok                          BOOLEAN;
   p_process_id                  PLS_INTEGER;
   p_sub_process_id              PLS_INTEGER;
   p_from_name                   VARCHAR2 ( 100 );
   p_to_name                     VARCHAR2 ( 4000 );
   p_subject                     VARCHAR2 ( 150 );
   p_message                     VARCHAR2 ( 32767 );
   p_filename                    VARCHAR2 ( 1000 );
   p_priority                    CHAR ( 1 );
   p_path                        VARCHAR2 ( 1000 );
   p_debug                       CHAR ( 1 ) := 'N';
   p_override                    VARCHAR2 ( 4000 );
--
-- p_database is populated by grabbing the SID of the current database
--
   p_database                    VARCHAR2 ( 100 );
--
--   p_database                    VARCHAR2 ( 100 );
--                                          := hum_time_tools.get_oracle_instance;
   p_database_string             VARCHAR2 ( 100 ) := ' - ' || p_database;
END ftp_utilities;
/
